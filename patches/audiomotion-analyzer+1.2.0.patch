diff --git a/node_modules/audiomotion-analyzer/dist/audioMotion-analyzer.js b/node_modules/audiomotion-analyzer/dist/audioMotion-analyzer.js
index f5bf245..4f9a63a 100644
--- a/node_modules/audiomotion-analyzer/dist/audioMotion-analyzer.js
+++ b/node_modules/audiomotion-analyzer/dist/audioMotion-analyzer.js
@@ -91,7 +91,10 @@ export default class AudioMotionAnalyzer {
 		var AudioContext = window.AudioContext || window.webkitAudioContext;
 
 		try {
-			this.audioCtx = new AudioContext();
+			if (options.audioCtx)
+				this.audioCtx = options.audioCtx;
+			else
+				this.audioCtx = new AudioContext();
 		}
 		catch( err ) {
 			throw 'Could not create audio context. Web Audio API not supported?';
@@ -99,7 +102,7 @@ export default class AudioMotionAnalyzer {
 
 		// Create analyzer node, connect audio source (if provided) and connect it to the destination
 
-		this.analyzer = this.audioCtx.createAnalyser();
+		this.analyzer = options.analyzer ? options.analyzer : this.audioCtx.createAnalyser();
 		this._audioSource = ( options.source ) ? this.connectAudio( options.source ) : undefined;
 		this.analyzer.connect( this.audioCtx.destination );
 
@@ -138,6 +141,7 @@ export default class AudioMotionAnalyzer {
 		this.canvas.style = 'max-width: 100%;';
 		this._container.appendChild( this.canvas );
 		this.canvasCtx = this.canvas.getContext( '2d', { alpha: false } );
+		this.colorCb = options.colorCb ? options.colorCb : () => { };
 		this._setCanvas('create');
 
 		// adjust canvas on window resize
@@ -504,7 +508,7 @@ export default class AudioMotionAnalyzer {
 			isLumiBars   = ( this.lumiBars && this._mode > 0 && this._mode < 10 );
 
 		if ( ! this.showBgColor )	// use black background
-			this.canvasCtx.fillStyle = '#000';
+			this.canvasCtx.fillStyle = this.colorCb(); //'#30404E'; //#FFFFFF
 		else
 			if ( isLedDisplay )
 				this.canvasCtx.fillStyle = '#111';
